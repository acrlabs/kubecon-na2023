package main

import (
	"context"
	"fmt"
	"os"
	"sync"
	"time"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"

	kubeconv1 "github.com/acrlabs/kubecon-na2023/controller/api/v1"
)

//nolint:gochecknoglobals
var (
	conjobScheme = runtime.NewScheme()
	setupLog     = ctrl.Log.WithName("setup")
)

// ConJobReconciler reconciles a ConJob object
type ConJobReconciler struct {
	client  client.Client
	scheme  *runtime.Scheme
	running sync.Mutex
}

//+kubebuilder:rbac:groups=core,resources=pods,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=core,resources=pods/status,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=kubecon.appliedcomputing.io,resources=conjobs,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=kubecon.appliedcomputing.io,resources=conjobs/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=kubecon.appliedcomputing.io,resources=conjobs/finalizers,verbs=update

func buildPod(conJob *kubeconv1.ConJob, scheme *runtime.Scheme, id int) (*corev1.Pod, error) {
	pod := &corev1.Pod{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: conJob.ObjectMeta.Namespace,
			Name:      fmt.Sprintf("%s-%d", conJob.ObjectMeta.Name, id),
		},
		Spec: corev1.PodSpec{
			Containers: []corev1.Container{
				{
					Name:    "runner",
					Image:   "alpine:3",
					Command: []string{"sleep"},
					Args:    []string{"infinity"},
				},
			},
		},
	}

	if err := ctrl.SetControllerReference(conJob, pod, scheme); err != nil {
		return nil, err
	}

	return pod, nil
}

func (self *ConJobReconciler) doWork(ctx context.Context, namespacedName types.NamespacedName) {
	defer self.running.Unlock()

	logger := log.FromContext(ctx)
	podsToLaunch := 1
	id := 0
	for {
		var conJob kubeconv1.ConJob
		if err := self.client.Get(ctx, namespacedName, &conJob); err != nil {
			logger.Error(err, "could not get ConJob", "name", namespacedName)
			break
		}

		logger.Info("creating pod objects", "count", podsToLaunch)
		for i := 0; i < podsToLaunch; i++ {
			pod, err := buildPod(&conJob, self.scheme, id)
			if err != nil {
				logger.Error(err, "could not build pod object")
				break
			}

			//nolint:contextcheck // this should run in the background indefinitely
			if err := self.client.Create(context.Background(), pod); err != nil {
				logger.Error(err, "could not create pod")
				break
			}
			id += 1
		}

		logger.Info("sleeping", "delay", conJob.Spec.Delay)
		time.Sleep(time.Duration(conJob.Spec.Delay) * time.Second)
		podsToLaunch *= 2
	}
}

func (self *ConJobReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	logger := log.FromContext(ctx)
	logger.Info("got new request", "request", req)

	self.running.Lock()

	go self.doWork(ctx, req.NamespacedName)

	return ctrl.Result{}, nil
}

func (self *ConJobReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&kubeconv1.ConJob{}).
		Complete(self)
}

func main() {
	opts := zap.Options{
		Development: true,
	}

	ctrl.SetLogger(zap.New(zap.UseFlagOptions(&opts)))

	mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme: conjobScheme,
	})
	if err != nil {
		setupLog.Error(err, "unable to start manager")
		os.Exit(1)
	}

	if err = (&ConJobReconciler{
		client: mgr.GetClient(),
		scheme: mgr.GetScheme(),
	}).SetupWithManager(mgr); err != nil {
		setupLog.Error(err, "unable to create controller", "controller", "ConJob")
		os.Exit(1)
	}

	setupLog.Info("starting manager")
	if err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {
		setupLog.Error(err, "problem running manager")
		os.Exit(1)
	}
}

//nolint:gochecknoinits // generated by kubebuilder
func init() {
	utilruntime.Must(scheme.AddToScheme(conjobScheme))
	utilruntime.Must(kubeconv1.AddToScheme(conjobScheme))
}
